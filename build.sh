#!/usr/bin/env bash
################################################################################
# Author: @gubatron - September 2019
# functions are defined in build-functions.sh
# ffmpeg codec flag related variables are generated by prepare-ffmpeg-flags.go
# as output strings which are evaluated by prepare_ffmpeg_flags
################################################################################
#set -x

if [ -z "${OPENSSL_ROOT}" ]; then
    set +x
    clear
    echo "OPENSSL_ROOT not set."
    echo
    echo "   It should point to an openssl installation folder (not the sources)"
    echo
    echo "   try: 'export OPENSSL_ROOT=${HOME}/src/openssl'           (mac, to build for mac)"
    echo "    or: 'export OPENSSL_ROOT=${HOME}/src/openssl-win64-x86_64' (ubuntu, to build for windows)"
    echo
    exit 1
fi

export PKG_CONFIG_PATH="${OPENSSL_ROOT}/lib/pkgconfig"
source build-functions.sh

ARCH=`arch`

if [ ${ARCH} == "i386" ]; then
    ARCH=x86_64
fi

if [ ${ARCH} == "aarch64" ]; then
    ARCH=arm64
fi

if is_linux; then
  echo "It's Linux (${ARCH})"
fi
if is_macos; then
  echo "It's MacOS (${ARCH})"
  #if [ ${ARCH} == "arm64" ]; then
  #  CC="/opt/homebrew/bin/gcc-11"
  #fi
fi
press_any_key

prepare_enabled_protocol_flags
if [ -z "${ENABLED_PROTOCOLS_FLAGS}" ]; then
  echo "Error: ENABLED_PROTOCOLS_FLAGS is unset"
  echo ${ENABLED_PROTOCOLS_FLAGS}
  exit 1
fi

verify_mplayer_source || exit 1
verify_ffmpeg_source || exit 1

prepare_ffmpeg_flags
verify_ffmpeg_flags || exit 1

# First we need to build ffmpeg
configure_ffmpeg
make -j 8
popd
echo "FFMpeg compilation finished"
press_any_key

# Paths found in MacOS 10.14.6 - September 2019
MACOS_FRAMEWORKS='/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks'
MACOS_USR_INCLUDES='/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include'

WARNING_FLAGS='-Wno-unused-function -Wno-switch -Wno-expansion-to-defined -Wno-deprecated-declarations -Wno-shift-negative-value -Wno-pointer-sign -Wno-nullability-completeness -Wno-logical-op-parentheses -Wno-parentheses -Wdangling-else'

EXTRA_LDFLAGS="-framework CoreMedia -framework Security -framework VideoToolbox -liconv -Lffmpeg/libavutil -lavutil -L${OPENSSL_ROOT}/lib -lssl -lcrypto"

EXTRA_CFLAGS="${WARNING_FLAGS} -Os -mmacosx-version-min=10.9 -I${MACOS_FRAMEWORKS} -I${MACOS_USR_INCLUDES} -I${OPENSSL_ROOT}/include"
CONFIG_LINUX_OPTS=''

if is_linux; then
  CC="x86_64-w64-mingw32-gcc"
  WINDRES="x86_64-w64-mingw32-windres"
  WARNING_FLAGS='-Wno-error=implicit-function-declaration -Wno-unused-function -Wno-switch -Wno-expansion-to-defined -Wno-deprecated-declarations -Wno-shift-negative-value -Wno-pointer-sign -Wno-parentheses -Wdangling-else'
  #--enable-runtime-cpudetection --enable-static
  CONFIG_LINUX_OPTS="--enable-static --windres=${WINDRES} --disable-pthreads --target=x86_64-mingw32 --enable-cross-compile --cc=${CC} --enable-winsock2_h"
  # Maybe -L/usr/x86_64-w64-mingw32/lib
  EXTRA_LDFLAGS="-L${OPENSSL_ROOT}/lib -lssl -lcrypto -Lffmpeg/libavutil -lavutil"
  EXTRA_CFLAGS="${WARNING_FLAGS} -mtune=generic -fPIC -Os -I/usr/x86_64-w64-mingw32/include -I${OPENSSL_ROOT}/include"
fi
################################################################################
# Configure MPlayer Build
################################################################################
pushd mplayer-trunk

# MacOS clang will not do --static
if is_macos && [ ${ARCH} == "arm64" ]; then
    CONFIG_LINUX_OPTS="--cc=${CC}"
    echo "CONFIG_LINUX_OPTS=${CONFIG_LINUX_OPTS}"
fi

./configure \
${CONFIG_LINUX_OPTS} \
--enable-openssl-nondistributable \
--disable-gnutls \
--disable-iconv \
--disable-mencoder \
--disable-vidix \
--disable-vidix-pcidb \
--disable-matrixview \
--disable-xss \
--disable-tga \
--disable-pnm \
--disable-md5sum \
--disable-yuv4mpeg \
--disable-quartz \
--disable-vcd \
--disable-bluray \
--disable-dvdnav \
--disable-dvdread \
--disable-alsa \
--disable-ossaudio \
--disable-arts \
--disable-esd \
--disable-pulse \
--disable-jack \
--disable-openal \
--disable-nas \
--disable-sgiaudio \
--disable-sunaudio \
--disable-kai \
--disable-dart \
--disable-win32waveout \
--disable-select \
--disable-win32dll \
--extra-cflags="${EXTRA_CFLAGS}" \
--extra-ldflags="${EXTRA_LDFLAGS}"

press_any_key
make -j 8

strip_and_upx_final_executable

popd
pwd
set +x
